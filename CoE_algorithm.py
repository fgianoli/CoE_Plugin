# -*- coding: utf-8 -*-

"""
/***************************************************************************
 convergence
                                 A QGIS plugin
 This plujgin allow to compute the layer of the CoE
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-09-12
        copyright            : (C) 2023 by Federico Gianoli
        email                : gianoli.federico@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Federico Gianoli'
__date__ = '2023-09-12'
__copyright__ = '(C) 2023 by Federico Gianoli'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.core import QgsProcessing
from qgis.core import QgsProcessingAlgorithm
from qgis.core import QgsProcessingMultiStepFeedback
from qgis.core import QgsProcessingParameterRasterLayer
from qgis.core import QgsProcessingParameterCrs
from qgis.core import QgsProcessingParameterNumber
from qgis.core import QgsProcessingParameterMatrix
from qgis.core import QgsProcessingParameterRasterDestination
from qgis.core import QgsCoordinateReferenceSystem
import processing


class Lc(QgsProcessingAlgorithm):

    def initAlgorithm(self, config=None):
        self.addParameter(QgsProcessingParameterRasterLayer('land_cover', 'Land Cover', defaultValue=None))
        # Set equal area
        #
        self.addParameter(QgsProcessingParameterCrs('crs', 'CRS', defaultValue='ESRI:54009'))
        self.addParameter(QgsProcessingParameterNumber('no_data_value', 'No data value', optional=True, type=QgsProcessingParameterNumber.Double, defaultValue=0))
        self.addParameter(QgsProcessingParameterNumber('pixel_size_in_meter', 'Pixel Size (in meter)', type=QgsProcessingParameterNumber.Double, minValue=0, defaultValue=1000))
        self.addParameter(QgsProcessingParameterMatrix('reclassify_table', 'Reclassify Table', numberRows=1, hasFixedNumberRows=False, headers=['1','2','3'], defaultValue=['','','','','','','','','']))
        self.addParameter(QgsProcessingParameterRasterDestination('Lc_reclassified', 'LC_reclassified', createByDefault=True, defaultValue=None))

    def processAlgorithm(self, parameters, context, model_feedback):
        # Use a multi-step feedback, so that individual child algorithm progress reports are adjusted for the
        # overall progress through the model
        feedback = QgsProcessingMultiStepFeedback(3, model_feedback)
        results = {}
        outputs = {}

        # Reclassify by table
        alg_params = {
            'DATA_TYPE': 5,  # Float32
            'INPUT_RASTER': parameters['land_cover'],
            'NODATA_FOR_MISSING': True,
            'NO_DATA': -9999,
            'RANGE_BOUNDARIES': 2,  # min <= valore <= max
            'RASTER_BAND': 1,
            'TABLE': parameters['reclassify_table'],
            'OUTPUT': parameters['Lc_reclassified']
        }
        outputs['ReclassifyByTable'] = processing.run('native:reclassifybytable', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['Lc_reclassified'] = outputs['ReclassifyByTable']['OUTPUT']

        feedback.setCurrentStep(1)
        if feedback.isCanceled():
            return {}

        # stratification
        alg_params = {
            'LC': outputs['ReclassifyByTable']['OUTPUT'],
            'issue': parameters['land_cover'],
            'output': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['Stratification'] = processing.run('r:stratification', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(2)
        if feedback.isCanceled():
            return {}

        # Warp (reproject)
        alg_params = {
            'DATA_TYPE': 0,  # Usa Il Tipo Dati del Layer in Ingresso
            'EXTRA': '',
            'INPUT': outputs['ReclassifyByTable']['OUTPUT'],
            'MULTITHREADING': False,
            'NODATA': parameters['no_data_value'],
            'OPTIONS': '',
            'RESAMPLING': 6,  # Moda
            'SOURCE_CRS': QgsCoordinateReferenceSystem('EPSG:4326'),
            'TARGET_CRS': parameters['crs'],
            'TARGET_EXTENT': None,
            'TARGET_EXTENT_CRS': None,
            'TARGET_RESOLUTION': parameters['pixel_size_in_meter'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['WarpReproject'] = processing.run('gdal:warpreproject', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        return results

    def name(self):
        return 'LC'

    def displayName(self):
        return 'LC'

    def group(self):
        return ''

    def groupId(self):
        return ''

    def createInstance(self):
        return Lc()
